---
title: 'RS Virus RNA-Seq'
date: '2023-11-19'
subtitle: ''
summary: 'RSV or RS virus, short for respiratory syncytial virus, is a single-stranded RNA virus belonging to the pneumovirus genus of the virus family. Symptoms are usually mild, similar to a cold, but can cause very serious illness in infants. a total of 8 RNA-Seq data from acute and chronic phases in nasal samples of 4 infants.'
categories: ['RNA-seq','RSV']
toc: true
jupyter: python3
---

RSV or RS virus, short for respiratory syncytial virus, is a single-stranded RNA virus belonging to the pneumovirus genus of the virus family. Symptoms are usually mild, similar to a cold, but can cause very serious illness in infants. a total of 8 RNA-Seq data from acute and chronic phases in nasal samples of 4 infants.

```{python}
#| vscode: {languageId: python}
import pandas as pd
import numpy as np
import re
import seaborn as sns
from pathlib import Path
from pydeseq2.dds import DeseqDataSet
from pydeseq2.ds import DeseqStats
import pickle as pkl
import matplotlib.pyplot as plt
```

## Variables

variable | description
---|---
@data_path | Path to the data csv file.
@out_path | Path to the output folder.
@data | Dataframe containing the data.
@n_cpus_use | Number of cpus to use.
@padj_cutoff | Adjusted p-values cutoff.
@lfc2_cutoff | Log2 fold change cutoff.

```{python}
#| vscode: {languageId: python}
count_file_path = list(Path().cwd().glob('*count*.csv'))[0]
```

```{python}
#| vscode: {languageId: python}
data_path = Path().cwd() / 'RSV_count.csv'
output = Path().cwd()
n_cpus_use = 2
padj_cutoff = 0.05
lfc2_cutoff = 2
```

## Assign Significance Function
Function created to create a new column of labels in pandas DataFrame, competibale with apply on pandas column.

```{python}
#| vscode: {languageId: python}
def assign_sig(p_value : int, log2FoldChange: int, padj: float=padj_cutoff , lfc2: int=lfc2_cutoff ) -> str:
   '''
   assigns a gene to a category based on the p_value and log2FoldChange, p_value and lfc2, p_value, lfc2 or non-sig.
   p_value and lfc2: abs(log2FoldChange) > 2 and p_value < 0.05.
   p_value: abs(log2FoldChange) <= 2 and p_value < 0.05.
   lfc2: abs(log2FoldChange) > 2 and p_value >= 0.05.
   @param p_value: p_value.
   @param log2FoldChange: log2foldchange.
   @param padj: p_value cutoff.
   @param lfc2: log2foldchange cutoff.
   '''
   if p_value < padj and abs(log2FoldChange) > lfc2 :
      return 'lfc2 and p_value'
   elif p_value < padj and   abs(log2FoldChange)  <= lfc2: 
      return 'p_value'
   elif p_value >= padj and  abs(log2FoldChange)  > lfc2:
      return 'lfc2'
   else:
      return 'non-sig'
```

## Data Check
```{python}
#| vscode: {languageId: python}
data = pd.read_csv(data_path, index_col=0)
data.shape
```

```{python}
#| vscode: {languageId: python}
data.head()
```

```{python}
#| vscode: {languageId: python}
data.info()
```

```{python}
#| vscode: {languageId: python}
df_counts = data[data.columns[data.columns.str.contains('SRR.*')]].T
# Convert the count matrix to numeric values and replace NaN with zeros
df_counts = df_counts.apply(pd.to_numeric, errors='coerce').fillna(0)
df_counts = df_counts[df_counts.columns[df_counts.sum(axis=0) >= 10]]
df_counts = df_counts.rename_axis(None, axis=0).rename_axis(None, axis=1)
df_counts
```

```{python}
#| vscode: {languageId: python}
metadata_d = {'patient1' : {'acute' : 'SRR7011737', 'chronic' : 'SRR7011738', 'Age' : '0.31-0.54yr'},
            'patient2' : {'acute' : 'SRR7011742', 'chronic' : 'SRR7011743', 'Age' : '0.24-0.35yr'},
            'patient3' : {'acute' : 'SRR7011755', 'chronic' : 'SRR7011756', 'Age' :  '0.23-0.36yr'},
            'patient4' : {'acute' : 'SRR7011757', 'chronic' : 'SRR7011758', 'Age' : '0.84-0.96yr'}}
metadata = (pd.DataFrame().from_dict(metadata_d, orient='index').reset_index().rename(columns={'index' : 'patient'})
            .melt(id_vars=['patient'], value_vars=['acute', 'chronic'], var_name='condition', value_name='sample')
            .drop('patient', axis=1)[['sample', 'condition']])
metadata.set_index('sample', inplace=True)
metadata.rename_axis(None, inplace=True)
```

## Deffrential expression analysis
Run DEseq2.</br>
pydeseq2 is Used to perform differential expression analysis.

Check if all samples in metadata are in df_counts:
```python
df_counts.index.isin(metadata.index).all()
```
Check if all samples in df_counts are in metadata:
```python
metadata.index.isin(df_counts.index).all()

```

```{python}
#| vscode: {languageId: python}
print(df_counts.index.isin(metadata.index).all(),metadata.index.isin(df_counts.index).all(), sep='\n')   
```

1. Convert index to string type and ensure indices match:
```python 
    df_counts.index = df_counts.index.astype(str)
```
2. Convert sample column to string type# Ensure indices match:
```python   
    metadata.index = metadata.index.astype(str)
```
3. Reorder df_counts and metadata to have the same index order:
```python
    df_counts = df_counts.reindex(metadata.index)
```

```{python}
#| vscode: {languageId: python}
df_counts.index = df_counts.index.astype(str)  
metadata.index = metadata.index.astype(str)  
df_counts = df_counts.reindex(metadata.index)
```

```{python}
#| vscode: {languageId: python}
dds = DeseqDataSet(
    counts=df_counts,
    metadata=metadata,
    design_factors="condition",
    refit_cooks=True,
    n_cpus=n_cpus_use,
)
dds.deseq2( )
```

save DEseq2 Object to pickle file:

```{python}
#| vscode: {languageId: python}
with open( output / "dds.pkl", "wb") as f:
    pkl.dump(dds, f)
```

## Statistical analysis
Run statistical analysis.</br>

```{python}
#| vscode: {languageId: python}
stat_res = DeseqStats(dds, n_cpus = n_cpus_use)
stat_res.summary()
```

```{python}
#| vscode: {languageId: python}
res = stat_res.results_df.reset_index().rename(columns={'index':'gene_id','log2FoldChange':'log2FC','pvalue':'p_value','padj':'p_adj'})
res.to_csv(output / 'deseq2_results.csv', index=False)
```

```{python}
#| vscode: {languageId: python}
sigs = res[(abs(res.log2FC) > 2) & (res.p_adj < 0.05) ]
sigs.to_csv(output / 'deseq2_results_sigs.csv', index=False)
```

## Processings and Plots

```{python}
#| vscode: {languageId: python}
dds.layers['log1p'] = np.log1p(dds.layers['normed_counts']) # log1p transform the normalized counts
dds_sigs = dds[:, sigs.index]

grapher = pd.DataFrame(dds_sigs.layers['log1p'].T,index=dds_sigs.var_names, columns=dds_sigs.obs_names)
pheat = sns.clustermap(grapher, z_score=0, cmap = 'RdBu_r')
pheat
pheat.savefig(output/ "significant_genes_heatmap_seaborn.png", dpi=300)
```

## Volcano Plot - Interactive
plotly used to create volcano plot.</br>
The plot is interactive and can be used to zoom in and out and to hover over points to see the gene name and the log2 fold change and the p-value.

```{python}
#| vscode: {languageId: python}
res = res.assign(log10pvalue = -np.log10(res.p_value),
                sig = (res.p_value < 0.05) & (abs(res.log2FC) > 2),
                regulated = res[['p_value','log2FC']].apply( lambda x: assign_sig(x.p_value, x.log2FC ), axis=1))
res.head()
```

```{python}
#| vscode: {languageId: python}
import plotly.express as px
plot_title = "Volcano plot control vs treatment" #@param {type:"string"}
x_axis_title = "log2 fold change" #@param {type:"string"}
y_axis_title = "-log10(pvalue)" #@param {type:"string"}
point_radius = 7 #@param {type:"slider", min:1, max:30, step:1}
choices = {'lfc2 and p_value': 'red', 'p_value': 'blue', 'non-sig': 'grey','lfc2':'green'}
colors = res.regulated.transform(lambda x: choices.get(x))

fig = px.scatter(data_frame=res,
    x='log2FC',
    y='log10pvalue',
    title=plot_title,
    hover_data=['gene_id', 'regulated'],
    labels={
        "x": x_axis_title,
        "y": y_axis_title
    },
    width=900,
    height=700
)
fig.update_layout({
'paper_bgcolor': 'white',
})
fig.update_traces(marker=dict(size=point_radius, color=colors))
fig.add_hline(y=-np.log10(0.05), line_dash="dash", line_color="grey")
fig.add_vline(x=2, line_dash="dash", line_color="grey")
fig.add_vline(x=-2, line_dash="dash", line_color="grey")
# Export the figure to HTML
fig.write_html(output / "volcano_plot_plotly.html")
fig.show()
```

# Volcano Plot - Static
matplotlib package was used to plot the volcano plot as a static plot.

```{python}
#| vscode: {languageId: python}
from adjustText import adjust_text

plt.figure(figsize=(8,8))
plt.scatter(x=res.log2FC, y=res.log10pvalue, s=1, label="Not significant", color="grey", alpha=0.5)

# highlight pvalue, lfc2 and both, separately according the significant genes value decided by the user
lfc2_df = res[res.regulated == 'lfc2']
pvalue_df = res[res.regulated == 'p_value']
both_df = res[res.regulated == 'lfc2 and p_value']

plt.scatter(x=both_df.log2FC, y=both_df.log10pvalue, s=3, label='lfc2 and p_value', color="red", marker="o", alpha=0.5)
plt.scatter(x=pvalue_df.log2FC, y=pvalue_df.log10pvalue, s=3, label="p_value", color="blue", marker="o", alpha=0.5)
plt.scatter(x=lfc2_df.log2FC, y=lfc2_df.log10pvalue, s=3, label="lfc2", color="green", marker="o", alpha=0.5)

both_df.index = both_df.gene_id

# Add labels to the 10 highest values on the y-axis
texts = []
top_10_indices = both_df.log10pvalue.nlargest(10).index
for i, index in enumerate(top_10_indices):
    texts.append(plt.text(both_df.loc[index, 'log2FC'], both_df.loc[index, 'log10pvalue'], index, fontsize=8))

# Adjust the position of the labels to avoid overlap
adjust_text(texts, arrowprops=dict(arrowstyle='->', color='black', lw=0.8), expand_points=(1.5, 1.5), expand_text=(1.5, 1.5))   

plt.xlabel("log2FoldChange")
plt.ylabel("â€“log10(p-value)")
plt.title("Volcano plot control vs treatment")
plt.axvline(-2, color="grey", linestyle="--")
plt.axvline(2, color="grey", linestyle="--")
plt.axhline(-np.log10(0.05), color="grey", linestyle="--")
plt.legend(loc='upper left', bbox_to_anchor=(0.3, 1))

# save the plot
plt.savefig(output / "volcano_plot_matplotlib.png", dpi=300)
```

```{python}
#| vscode: {languageId: python}
res.head()
res.rename(columns={'log10pvalue':'log10p'}, inplace=True)
```

```{python}
#| vscode: {languageId: python}
import matplotlib.pyplot as plt
from typing import Optional, Type
import pandas as pd
import numpy as np

def VolcanoPlot(df: Type[pd.DataFrame], x: str = 'log2FC', y: str = 'log10p', 
                xline_color: str = 'grey', yline_color: str = 'grey', line_style: str = '--',
                loc: str = 'upper left', bbox_to_anchor: Optional[tuple] = (0.3, 1),
                figsize: tuple = (8, 8), axline: float = 2, title: str = "Volcano Plot",
                top_n: int = 10, save_path: Optional[str] = None,dpi: int=300 , **kwargs) -> None:
    """
    Generate a volcano plot to visualize differential gene expression.

    Parameters:
    - df: pandas DataFrame containing the data.
    - x: column name for the x-axis.
    - y: column name for the y-axis.
    - xline_color: color of the vertical lines.
    - yline_color: color of the horizontal line.
    - line_style: style of the lines.
    - loc: location of the legend (e.g., 'upper left', 'lower right', 'center', etc.).
    - bbox_to_anchor: anchor point of the legend.
    - figsize: size of the figure.
    - axline: x-axis value for the vertical lines.
    - title: title of the plot.
    - top_n: number of top genes to label.
    - save_path: path to save the plot as an image file (optional).
    - **kwargs: additional keyword arguments for scatter plot customization.

    Returns:
    - None
    """
    if 'regulated' not in df.columns:
        df['regulated'] = df.apply(lambda row: assign_sig(row['p_value'], row['log2FC']), axis=1)

    plt.figure(figsize=figsize)
    plt.scatter(x=df[x], y=df[y], s=1, label="Not significant", color="grey", alpha=0.5, **kwargs)

    lfc2_df = df[df.regulated == 'lfc2'].copy()
    pvalue_df = df[df.regulated == 'p_value'].copy()
    both_df = df[df.regulated == 'lfc2 and p_value'].copy()

    plt.scatter(x=pvalue_df[x], y=pvalue_df[y], s=3, label="p_value", color="blue", marker="o", alpha=0.5, **kwargs)
    plt.scatter(x=lfc2_df[x], y=lfc2_df[y], s=3, label="lfc2", color="green", marker="o", alpha=0.5, **kwargs)
    plt.scatter(x=both_df[x], y=both_df[y], s=3, label='lfc2 and p_value', color="red", marker="o", alpha=0.5, **kwargs)

    texts = []
    top_n_indices = both_df[y].nlargest(top_n).index
    for i, index in enumerate(top_n_indices):
        texts.append(plt.text(both_df.loc[index, x], both_df.loc[index, y], index, fontsize=8))

    adjust_text(texts, arrowprops=dict(arrowstyle='->', color='black', lw=0.8), expand_points=(1.5, 1.5), expand_text=(1.5, 1.5))

    plt.xlabel(x)
    plt.ylabel(y)
    plt.title(title)
    plt.axvline(-axline, color=xline_color, linestyle=line_style)
    plt.axvline(axline, color=xline_color, linestyle=line_style)
    plt.axhline(-np.log10(0.05), color=yline_color, linestyle=line_style)
    plt.legend(loc=loc, bbox_to_anchor=bbox_to_anchor)

    if save_path:
        plt.savefig(save_path, dpi=dpi)

    plt.show()


def assign_sig(p_value : int, log2FoldChange: int, padj: float=padj_cutoff , lfc2: int=lfc2_cutoff ) -> str:
   '''
   assigns a gene to a category based on the p_value and log2FoldChange, p_value and lfc2, p_value, lfc2 or non-sig.
   p_value and lfc2: abs(log2FoldChange) > 2 and p_value < 0.05.
   p_value: abs(log2FoldChange) <= 2 and p_value < 0.05.
   lfc2: abs(log2FoldChange) > 2 and p_value >= 0.05.
   parameters:
   - p_value: p_value.
   - log2FoldChange: log2foldchange.
   - padj: p_value cutoff.
   - lfc2: log2foldchange cutoff.
   
   returns:
   label: str 
   '''
   if p_value < padj and abs(log2FoldChange) > lfc2 :
      return 'lfc2 and p_value'
   elif p_value < padj and   abs(log2FoldChange)  <= lfc2: 
      return 'p_value'
   elif p_value >= padj and  abs(log2FoldChange)  > lfc2:
      return 'lfc2'
   else:
      return 'non-sig'
  
VolcanoPlot(df=res,x='log2FC', y ='log10p')
```

# Conclusion:
The volcano plot shows the genes that are significantly differentially expressed between the acute and chronic phases in nasal samples of 4 infants.</br>
The genes that are significantly differentially expressed are the genes that are located in the upper part of the plot and are colored in red.

```{python}
#| vscode: {languageId: python}
sigs
```

# packages:
1. [![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.10152802.svg)](https://doi.org/10.5281/zenodo.10152802)
2. [![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.10107975.svg)](https://doi.org/10.5281/zenodo.10107975)
3. [![DOI](https://zenodo.org/badge/DOI/10.25080/majora-1b6fd038-026.svg)](https://doi.org/10.25080/majora-1b6fd038-026)

